<Type Name="IOMasterPort" FullName="MonoMac.IOKit.IOMasterPort">
  <TypeSignature Language="C#" Value="public class IOMasterPort : MonoMac.Kernel.Mach.Port" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IOMasterPort extends MonoMac.Kernel.Mach.Port" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Kernel.Mach.Port</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOMasterPort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new default IOMasterPort port used to initiate communication with IOKit.</summary>
        <remarks>Methods that don't specify an existing object require the IOMasterPort to be passed.
               This constructor obtains that port.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If there was an error creating the port.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOMasterPort (uint bootstrapPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 bootstrapPort) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bootstrapPort" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="bootstrapPort">The bootstrap port.</param>
        <summary>Creates a new IOMasterPort used to initiate communication with IOKit.</summary>
        <remarks>Methods that don't specify an existing object require the IOMasterPort to be passed.
               This constructor obtains that port.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If there was an error creating the port.</exception>
      </Docs>
    </Member>
    <Member MemberName="BusyState">
      <MemberSignature Language="C#" Value="public uint BusyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 BusyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               Returns the busyState of all IOServices.
               </summary>
        <value>The busyState count.</value>
        <remarks>Many activities in IOService are asynchronous. When registration, matching,
               or termination is in progress on an IOService, its busyState is increased by one.
               Change in busyState to or from zero also changes the IOService's provider's busyState
               by one, which means that an IOService is marked busy when any of the above activities
               is ocurring on it or any of its clients. BusyState returns the busy state
               of the root of the service plane which reflects the busy state of all IOServices.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMatchingDictionaryForBSDName">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForBSDName (string bsdName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForBSDName(string bsdName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bsdName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bsdName">The BSD name.</param>
        <summary>
               Create a matching dictionary that specifies an IOService match based on BSD device name using this master port.
               </summary>
        <returns>The matching dictionary created, is returned on success, or zero on failure.
               The dictionary is commonly passed to IOServiceGetMatchingServices or IOServiceAddNotification.
               It should be released with CFRelease by the caller.</returns>
        <remarks>IOServices that represent BSD devices have an associated BSD name.
               This function creates a matching dictionary that will match IOService's with a given BSD name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNotificationPort">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IONotificationPort CreateNotificationPort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IONotificationPort CreateNotificationPort() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IONotificationPort</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns a IONotificationPort object for receiving IOKit notifications
               of new devices or state changes.</summary>
        <returns>The notification port object.</returns>
        <remarks>Creates the notification object to receive notifications from IOKit of new device arrivals or state changes.
               The notification object can be supply a CFRunLoopSource, or mach_port_t to be used to listen for events.</remarks>
        <exception cref="T:System.Exception">If the object was not created</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRootIterator">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt; CreateRootIterator (MonoMac.IOKit.RegistryPlane plane, MonoMac.IOKit.RegistryIteratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IORegistryIterator`1&lt;class MonoMac.IOKit.IOObject&gt; CreateRootIterator(valuetype MonoMac.IOKit.RegistryPlane plane, valuetype MonoMac.IOKit.RegistryIteratorOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
        <Parameter Name="options" Type="MonoMac.IOKit.RegistryIteratorOptions" />
      </Parameters>
      <Docs>
        <param name="plane">The type of plane.</param>
        <param name="options">RegistryIteratorOptions.Recursive may be set to recurse automatically
               into each entry as it is returned from IOIteratorNext calls on the registry iterator.</param>
        <summary>Create an iterator rooted at the registry root using this master port.</summary>
        <returns>The iterator.</returns>
        <remarks>This method creates an IORegistryIterator in the kernel that is set up with options
               to iterate children of the registry root entry, and to recurse automatically into entries as they are returned,
               or only when instructed with calls to IORegistryIterator.EnterEntry (). The iterator object keeps track of entries
               that have been recursed into previously to avoid loops.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromPath">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IORegistryEntry FromPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IORegistryEntry FromPath(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path.</param>
        <summary>Looks up a registry entry by path using this master port.</summary>
        <returns>The IORegistryEntry witch was found with the path, or <c>null</c> on failure.</returns>
        <remarks>This function parses paths to lookup registry entries. The path should begin with '&lt;plane name&gt;:'
               If there are characters remaining unparsed after an entry has been looked up, this is considered an invalid lookup.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatchingService">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IOService GetMatchingService (IntPtr matchingDictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IOService GetMatchingService(native int matchingDictionary) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IOService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchingDictionary" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="matchingDictionary">To be added.</param>
        <summary>
               Look up a registered IOService object that matches a matching dictionary.
               </summary>
        <returns>The first service matched is returned on success or null if no services matched.</returns>
        <remarks>This is the preferred method of finding IOService objects currently registered by IOKit
               (that is, objects that have had their RegisterService() methods invoked). To find IOService objects
               that aren't yet registered, use an iterator as created by IORegistryEntry.CreateIterator().
               IOService.AddMatchingNotification can also supply this information and install a notification of new IOServices.
               The matching information used in the matching dictionary may vary depending on the class of service being looked up.
               </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatchingServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IOIterator&lt;T&gt; GetMatchingServices&lt;T&gt; (IntPtr matchingDictionary) where T : MonoMac.IOKit.IOService;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IOIterator`1&lt;!!T&gt; GetMatchingServices&lt;(class MonoMac.IOKit.IOService) T&gt;(native int matchingDictionary) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IOIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>MonoMac.IOKit.IOService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="matchingDictionary" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="matchingDictionary">To be added.</param>
        <summary>
               Look up registered IOService objects that match a matching dictionary.
               </summary>
        <returns>A list of matching IOService objects</returns>
        <remarks>This is the preferred method of finding IOService objects currently registered by IOKit
               (that is, objects that have had their RegisterService() methods invoked). To find IOService objects that aren't yet registered,
               use an iterator as created by IORegistryEntry.CreateIterator(). IOService.AddMatchingNotification can also supply this information
               and install a notification of new IOServices. The matching information used in the matching dictionary may vary depending
               on the class of service being looked up.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               Returns <see langword="true" /> any IOServices are busy; otherwise <langref cref="false" />.
               </summary>
        <value>To be added.</value>
        <remarks>Many activities in IOService are asynchronous. When registration, matching,
               or termination is in progress on an IOService, its busyState is increased by one.
               Change in busyState to or from zero also changes the IOService's provider's busyState
               by one, which means that an IOService is marked busy when any of the above activities
               is ocurring on it or any of its clients. BusyState returns the busy state
               of the root of the service plane which reflects the busy state of all IOServices.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootEntry">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IORegistryEntry RootEntry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.IOKit.IORegistryEntry RootEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the registry root using this master port.</summary>
        <value>The IORegistryEntry root instance, or <c>null</c> on failure.</value>
        <remarks>This method provides an accessor to the root of the registry for the machine.
               The root may be passed to a registry iterator when iterating a plane,
               and contains properties that describe the available planes, and diagnostic information for IOKit.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(float64 seconds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">Number of seconds to wait.</param>
        <summary>
            Wait until all IOServices are not busy.
        </summary>
        <returns>
          <see langword="true" /> if the method timed out; otherwise <langref cref="false" /></returns>
        <remarks>Blocks the caller until all IOServices are not busy, see <see cref="P:MonoMac.IOKit.IOMasterPort.BusyState" />.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
