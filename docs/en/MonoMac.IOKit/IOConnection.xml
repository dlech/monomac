<Type Name="IOConnection" FullName="MonoMac.IOKit.IOConnection">
  <TypeSignature Language="C#" Value="public class IOConnection : MonoMac.IOKit.IOObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IOConnection extends MonoMac.IOKit.IOObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.IOKit.IOObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddClient">
      <MemberSignature Language="C#" Value="public void AddClient (MonoMac.IOKit.IOConnection client);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClient(class MonoMac.IOKit.IOConnection client) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="MonoMac.IOKit.IOConnection" />
      </Parameters>
      <Docs>
        <param name="client">Another IOConnection created by IOService.Open ().</param>
        <summary>
               Inform a connection of a second connection.
               </summary>
        <remarks>This is a generic method to inform a family connection of a second connection, and is rarely used.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
               Close a connection to an IOService.
               </summary>
        <remarks>A connection created with IOService.Open () should be closed
               when the connection is no longer to be used.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been closed or disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the IOConnection object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the IOConnection class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposting <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the IOConnection ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Service">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IOService Service { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.IOKit.IOService Service" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IOService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               Gets the IOService that this instance was opened on.
               </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCFProperties">
      <MemberSignature Language="C#" Value="public void SetCFProperties (MonoMac.ObjCRuntime.INativeObject properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCFProperties(class MonoMac.ObjCRuntime.INativeObject properties) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="MonoMac.ObjCRuntime.INativeObject" />
      </Parameters>
      <Docs>
        <param name="properties">A CF container - commonly a CFDictionary but this is not enforced.
               The container should consist of objects which are understood by IOKit - these are currently :
               CFDictionary, CFArray, CFSet, CFString, CFData, CFNumber, CFBoolean, and are passed in the kernel
               as the corresponding OSDictionary etc. objects.</param>
        <summary>
               Set CF container based properties on a connection.
               </summary>
        <remarks>This is a generic method to pass a CF container of properties to the connection.
               The properties are interpreted by the family and commonly represent configuration settings,
               but may be interpreted as anything.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been closed or disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetCFProperty">
      <MemberSignature Language="C#" Value="public void SetCFProperty (string name, MonoMac.ObjCRuntime.INativeObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCFProperty(string name, class MonoMac.ObjCRuntime.INativeObject value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="MonoMac.ObjCRuntime.INativeObject" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
               Set a CF container based property on a connection.
               </summary>
        <remarks>This is a generic method to pass a CF property to the connection.
               The property is interpreted by the family and commonly represent configuration settings,
               but may be interpreted as anything.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been closed or disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetNotificationPort">
      <MemberSignature Language="C#" Value="public void SetNotificationPort (uint type, MonoMac.Kernel.Mach.Port port, UIntPtr reference = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNotificationPort(unsigned int32 type, class MonoMac.Kernel.Mach.Port port, native unsigned int reference) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.UInt32" />
        <Parameter Name="port" Type="MonoMac.Kernel.Mach.Port" />
        <Parameter Name="reference" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="type">The type of notification requested, not interpreted by IOKit and family defined.</param>
        <param name="port">The port to which to send notifications.</param>
        <param name="reference">Some families may support passing a reference parameter for the callers use with the notification.</param>
        <summary>
               Set a port to receive family specific notifications.
               </summary>
        <remarks>This is a generic method to pass a mach port send right to be be used by family specific notifications.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been closed or disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
