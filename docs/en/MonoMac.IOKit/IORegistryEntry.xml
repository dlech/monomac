<Type Name="IORegistryEntry" FullName="MonoMac.IOKit.IORegistryEntry">
  <TypeSignature Language="C#" Value="public class IORegistryEntry : MonoMac.IOKit.IOObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi IORegistryEntry extends MonoMac.IOKit.IOObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.IOKit.IOObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateCFProperties">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSMutableDictionary CreateCFProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.Foundation.NSMutableDictionary CreateCFProperties() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Create a CF dictionary representation of a registry entry's property table.</summary>
        <returns>A NSMutableDictionary.</returns>
        <remarks>This function creates an instantaneous snapshot of a registry entry's property table,
               creating a CFDictionary analogue in the caller's task. Not every object available in the kernel is
               represented as a CF container; currently OSDictionary, OSArray, OSSet, OSSymbol, OSString, OSData,
               OSNumber, OSBoolean are created as their CF counterparts. </remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCFProperty">
      <MemberSignature Language="C#" Value="public IntPtr CreateCFProperty (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int CreateCFProperty(string key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The property name.</param>
        <summary>Create a CF representation of a registry entry's property.</summary>
        <returns>A CF container is created and returned the caller on success.
               The caller should release with CFRelease.</returns>
        <remarks>This function creates an instantaneous snapshot of a registry entry property,
               creating a CF container analogue in the caller's task. Not every object available in the kernel is
               represented as a CF container; currently OSDictionary, OSArray, OSSet, OSSymbol, OSString, OSData,
               OSNumber, OSBoolean are created as their CF counterparts. </remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateIterator">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt; CreateIterator (MonoMac.IOKit.RegistryPlane plane, MonoMac.IOKit.RegistryIteratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IORegistryIterator`1&lt;class MonoMac.IOKit.IOObject&gt; CreateIterator(valuetype MonoMac.IOKit.RegistryPlane plane, valuetype MonoMac.IOKit.RegistryIteratorOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
        <Parameter Name="options" Type="MonoMac.IOKit.RegistryIteratorOptions" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <param name="options">RegistryIteratorOptions.Recursive may be set to recurse automatically
               into each entry as it is returned from IOIterator.MoveNext () calls on the registry iterator.
               RegistryIteratorOptions.IncludeParents may be set to iterate the parents of each entry,
               by default the children are iterated.</param>
        <summary>Create an iterator rooted at a given registry entry.</summary>
        <returns>The iterator.</returns>
        <remarks>This method creates an IORegistryIterator in the kernel that is set up with options
               to iterate children or parents of a root entry, and to recurse automatically into entries as they are returned,
               or only when instructed with calls to IORegistryIterator.EnterEntry (). The iterator object keeps track of entries
               that have been recursed into previously to avoid loops.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRootIterator">
      <MemberSignature Language="C#" Value="public static MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt; CreateRootIterator (MonoMac.IOKit.RegistryPlane plane, MonoMac.IOKit.RegistryIteratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOKit.IORegistryIterator`1&lt;class MonoMac.IOKit.IOObject&gt; CreateRootIterator(valuetype MonoMac.IOKit.RegistryPlane plane, valuetype MonoMac.IOKit.RegistryIteratorOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
        <Parameter Name="options" Type="MonoMac.IOKit.RegistryIteratorOptions" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <param name="options">RegistryIteratorOptions.Recursive may be set to recurse automatically
               into each entry as it is returned from IOIteratorNext calls on the registry iterator.</param>
        <summary>Create an iterator rooted at the registry root using the default master port.</summary>
        <returns>The iterator.</returns>
        <remarks>This method creates an IORegistryIterator in the kernel that is set up with options
               to iterate children of the registry root entry, and to recurse automatically into entries as they are returned,
               or only when instructed with calls to IORegistryIterator.EnterEntry (). The iterator object keeps track of entries
               that have been recursed into previously to avoid loops.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromPath">
      <MemberSignature Language="C#" Value="public static MonoMac.IOKit.IORegistryEntry FromPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOKit.IORegistryEntry FromPath(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path.</param>
        <summary>Looks up a registry entry by path using the default master port.</summary>
        <returns>The IORegistryEntry witch was found with the path, or <see langword="null" /> on failure.</returns>
        <remarks>This function parses paths to lookup registry entries. The path should begin with '&lt;plane name&gt;:'
               If there are characters remaining unparsed after an entry has been looked up, this is considered an invalid lookup.
               Paths are further documented in IORegistryEntry.h</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildEntry">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IORegistryEntry GetChildEntry (MonoMac.IOKit.RegistryPlane plane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IORegistryEntry GetChildEntry(valuetype MonoMac.IOKit.RegistryPlane plane) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <summary>Returns the first child of a registry entry in a plane.</summary>
        <returns>The first child of the registry entry.</returns>
        <remarks>This function will return the child which first attached to a registry entry in a plane.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChildIterator">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt; GetChildIterator (MonoMac.IOKit.RegistryPlane plane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IORegistryIterator`1&lt;class MonoMac.IOKit.IOObject&gt; GetChildIterator(valuetype MonoMac.IOKit.RegistryPlane plane) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <summary>Returns an iterator over an registry entry's child entries in a plane.</summary>
        <returns>The created iterator over the children of the entry.</returns>
        <remarks>This method creates an iterator which will return each of a registry entry's child entries in a specified plane.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLocationInPlane">
      <MemberSignature Language="C#" Value="public string GetLocationInPlane (MonoMac.IOKit.RegistryPlane plane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetLocationInPlane(valuetype MonoMac.IOKit.RegistryPlane plane) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <summary>Returns the location assigned to a registry entry, in a specified plane.</summary>
        <returns>The location.</returns>
        <remarks>Registry entries can given a location string in a particular plane, or globally.
               If the entry has had a location set in the specified plane that location string will be returned,
               otherwise the global location string is returned. If no global location string has been set, an error is returned.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNameInPlane">
      <MemberSignature Language="C#" Value="public string GetNameInPlane (MonoMac.IOKit.RegistryPlane plane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetNameInPlane(valuetype MonoMac.IOKit.RegistryPlane plane) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <summary>Gets the name assigned to a registry entry, in a specified plane.</summary>
        <returns>The name.</returns>
        <remarks>Registry entries can be named in a particular plane, or globally.
               This function returns the entry's name in the specified plane or global name
               if it has not been named in that plane. The global name defaults to the entry's
               meta class name if it has not been named.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetParentEntry">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IORegistryEntry GetParentEntry (MonoMac.IOKit.RegistryPlane plane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IORegistryEntry GetParentEntry(valuetype MonoMac.IOKit.RegistryPlane plane) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <summary>Returns the first parent of a registry entry in a plane.</summary>
        <returns>The first parent of the registry entry.</returns>
        <remarks>This function will return the parent to which the registry entry was first attached in a plane.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetParentIterator">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt; GetParentIterator (MonoMac.IOKit.RegistryPlane plane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IORegistryIterator`1&lt;class MonoMac.IOKit.IOObject&gt; GetParentIterator(valuetype MonoMac.IOKit.RegistryPlane plane) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryIterator&lt;MonoMac.IOKit.IOObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <summary>Returns an iterator over an registry entry's parent entries in a plane.</summary>
        <returns>The created iterator over the parents of the entry.</returns>
        <remarks>This method creates an iterator which will return each of a registry entry's parent entries in a specified plane.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPathInPlane">
      <MemberSignature Language="C#" Value="public string GetPathInPlane (MonoMac.IOKit.RegistryPlane plane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPathInPlane(valuetype MonoMac.IOKit.RegistryPlane plane) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <summary>Create a path for a registry entry.</summary>
        <returns>The path.</returns>
        <remarks>The path describes the entry's attachment in a particular plane, which must be specified.
               The path begins with the plane name followed by a colon, and then followed by '/' separated path components
               for each of the entries between the root and the registry entry. An alias may also exist for the entry,
               and will be returned if available.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public ulong ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int64 ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an ID for the registry entry that is global to all tasks.</summary>
        <value>To be added.</value>
        <remarks>The entry ID returned by IORegistryEntry.EntryID can be used to identify
               a registry entry across all tasks. A registry entry may be looked up by its EntryID by creating
               a matching dictionary with IORegistryEntry.CreateIDMatchingDictionary () to be used with the IOKit matching methods.
               The ID is valid only until the machine reboots.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInPlane">
      <MemberSignature Language="C#" Value="public bool IsInPlane (MonoMac.IOKit.RegistryPlane plane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInPlane(valuetype MonoMac.IOKit.RegistryPlane plane) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plane" Type="MonoMac.IOKit.RegistryPlane" />
      </Parameters>
      <Docs>
        <param name="plane">The registry plane.</param>
        <summary>Determines if this registry entry is attached in a plane.</summary>
        <returns>If the entry has a parent in the plane, true is returned, otherwise false is returned.</returns>
        <remarks>This method determines if this entry is attached in a plane to any other entry.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the name assigned to this registry entry.</summary>
        <value>To be added.</value>
        <remarks>Registry entries can be named in a particular plane, or globally.
               This function returns the entry's global name. The global name defaults
               to the entry's meta class name if it has not been named.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="RootEntry">
      <MemberSignature Language="C#" Value="public static MonoMac.IOKit.IORegistryEntry RootEntry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoMac.IOKit.IORegistryEntry RootEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IORegistryEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the registry root using the default master port.</summary>
        <value>The IORegistryEntry root instance, or <see langword="null" /> on failure.</value>
        <remarks>This method provides an accessor to the root of the registry for the machine.
               The root may be passed to a registry iterator when iterating a plane,
               and contains properties that describe the available planes, and diagnostic information for IOKit.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCFProperties">
      <MemberSignature Language="C#" Value="public void SetCFProperties (MonoMac.ObjCRuntime.INativeObject properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCFProperties(class MonoMac.ObjCRuntime.INativeObject properties) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="MonoMac.ObjCRuntime.INativeObject" />
      </Parameters>
      <Docs>
        <param name="properties">A CF container - commonly a CFDictionary but this is not enforced.
                   The container should consist of objects which are understood by IOKit - these are currently : CFDictionary, CFArray,
                   CFSet, CFString, CFData, CFNumber, CFBoolean, and are passed in the kernel as the corresponding
                   OSDictionary etc. objects.</param>
        <summary>Set CF container based properties in a registry entry.</summary>
        <remarks>This is a generic method to pass a CF container of properties to an object in the registry.
                   Setting properties in a registry entry is not generally supported, it is more common to support IOConnection.SetCFProperties
                   for connection based property setting. The properties are interpreted by the object.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetCFProperty">
      <MemberSignature Language="C#" Value="public void SetCFProperty (string propertyName, MonoMac.ObjCRuntime.INativeObject properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCFProperty(string propertyName, class MonoMac.ObjCRuntime.INativeObject properties) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="properties" Type="MonoMac.ObjCRuntime.INativeObject" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property.</param>
        <param name="properties">To be added.</param>
        <summary>Set a CF container based property in a registry entry.</summary>
        <remarks>This is a generic method to pass a CF container as a property to an object in the registry.
               Setting properties in a registry entry is not generally supported, it is more common to support
               IOConnecttion.SetCFProperty for connection based property setting. The property is interpreted by the object.</remarks>
        <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">Thrown if the external method call failed.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
