<Type Name="IOService" FullName="MonoMac.IOKit.IOService">
  <TypeSignature Language="C#" Value="public class IOService : MonoMac.IOKit.IORegistryEntry" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi IOService extends MonoMac.IOKit.IORegistryEntry" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.IOKit.IORegistryEntry</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddInterestNotification">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IOObject AddInterestNotification (MonoMac.IOKit.IONotificationPort notifyPort, MonoMac.IOKit.InterestType interestType, MonoMac.IOKit.IOService.InterestCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IOObject AddInterestNotification(class MonoMac.IOKit.IONotificationPort notifyPort, valuetype MonoMac.IOKit.InterestType interestType, class MonoMac.IOKit.IOService/InterestCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IOObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyPort" Type="MonoMac.IOKit.IONotificationPort" />
        <Parameter Name="interestType" Type="MonoMac.IOKit.InterestType" />
        <Parameter Name="callback" Type="MonoMac.IOKit.IOService+InterestCallback" />
      </Parameters>
      <Docs>
        <param name="notifyPort">A IONotificationPort object that controls how messages will be sent when the notification is fired. See <see cref="C:MonoMac.IOKit.IONotificationPort" />.</param>
        <param name="interestType">
          <para>Notification type.</para>
          <para>
            <see cref="F:MonoMac.IOKit.InterestType.General" />: General state changes delivered via the IOService::message API.</para>
          <para>
            <see cref="F:MonoMac.IOKit.InterestType.Busy" />: Delivered when the IOService changes its busy state to or from zero. The message argument contains the new busy state causing the notification.</para>
        </param>
        <param name="callback">A callback function called when the notification fires, with messageType and messageArgument for the state change.</param>
        <summary>Register for notification of state changes in an IOService.</summary>
        <returns>An IOObject is returned on success, and should be disposed when you no longer want to receive notifications.</returns>
        <remarks>IOService objects deliver notifications of their state changes to their clients via the IOService::message API, and to other interested parties including callers of this function.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMatchingNotification&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoMac.IOKit.IOIterator&lt;T&gt; AddMatchingNotification&lt;T&gt; (MonoMac.IOKit.IONotificationPort notifyPort, MonoMac.IOKit.NotificationType notificationType, MonoMac.Foundation.NSDictionary matchingDictionary, MonoMac.IOKit.IOService.MatchingCallback&lt;T&gt; callback) where T : MonoMac.IOKit.IOService;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOKit.IOIterator`1&lt;!!T&gt; AddMatchingNotification&lt;(class MonoMac.IOKit.IOService) T&gt;(class MonoMac.IOKit.IONotificationPort notifyPort, valuetype MonoMac.IOKit.NotificationType notificationType, class MonoMac.Foundation.NSDictionary matchingDictionary, class MonoMac.IOKit.IOService/MatchingCallback`1&lt;!!T&gt; callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IOIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>MonoMac.IOKit.IOService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="notifyPort" Type="MonoMac.IOKit.IONotificationPort" />
        <Parameter Name="notificationType" Type="MonoMac.IOKit.NotificationType" />
        <Parameter Name="matchingDictionary" Type="MonoMac.Foundation.NSDictionary" />
        <Parameter Name="callback" Type="MonoMac.IOKit.IOService+MatchingCallback&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="notifyPort">A IONotificationPort object that controls how messages will be sent when the armed notification is fired.
               When the notification is delivered, the IOIterator&lt;IOService&gt; representing the notification should be iterated through
                   to pick up all outstanding objects. When the iteration is finished the notification is rearmed.</param>
        <param name="notificationType">A NotificationType</param>
        <param name="matchingDictionary">A CF dictionary containing matching information.
                   IOKit can construct matching dictionaries for common criteria with helper methods
                   such as <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForClass" />, <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForName" />
                   and <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForBSDName" />.</param>
        <param name="callback">A callback function called when the notification fires.</param>
        <summary>
               Look up registered IOService objects that match a matching dictionary, and install a notification request of new IOServices that match.
               </summary>
        <returns>An IOIterator of matching IOService objects. The notification is armed when the Enumerator is emptied
               by calls to MoveNext() - when no more objects are returned, the notification is armed. Note the notification is
               not armed when first created. The notification is unarmed when the IOIterator is disposed.</returns>
        <remarks>This is the preferred method of finding IOService objects that may arrive at any time.
                   The type of notification specifies the state change the caller is interested in, on IOService's that match the match dictionary.
                   The matching information used in the matching dictionary may vary depending on the class of service being looked up.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="AllBusyState">
      <MemberSignature Language="C#" Value="public static uint AllBusyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property unsigned int32 AllBusyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               Returns the busyState of all IOServices.
               </summary>
        <value>The busyState count.</value>
        <remarks>Many activities in IOService are asynchronous. When registration, matching,
               or termination is in progress on an IOService, its busyState is increased by one.
               Change in busyState to or from zero also changes the IOService's provider's busyState
               by one, which means that an IOService is marked busy when any of the above activities
               is ocurring on it or any of its clients. BusyState returns the busy state
               of the root of the service plane which reflects the busy state of all IOServices.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="BusyState">
      <MemberSignature Language="C#" Value="public uint BusyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 BusyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               Returns the busyState of an IOService.
               </summary>
        <value>The busyState count.</value>
        <remarks>Many activities in IOService are asynchronous. When registration, matching, or termination is in progress
               on an IOService, its busyState is increased by one. Change in busyState to or from zero also changes the IOService's
               provider's busyState by one, which means that an IOService is marked busy when any of the above activities is ocurring
               on it or any of its clients.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMatchingDictionaryForBSDName">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForBSDName (string bsdName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForBSDName(string bsdName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bsdName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bsdName">The BSD name.</param>
        <summary>
               Create a matching dictionary that specifies an IOService match based on BSD device name using the default master port.
               </summary>
        <returns>The matching dictionary created, is returned on success, or <c>null</c> on failure.
               The dictionary is commonly passed to IOServiceGetMatchingServices or IOServiceAddNotification.
               </returns>
        <remarks>IOServices that represent BSD devices have an associated BSD name.
               This function creates a matching dictionary that will match IOService's with a given BSD name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMatchingDictionaryForClass&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForClass&lt;T&gt; () where T : MonoMac.IOKit.IOService;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForClass&lt;(class MonoMac.IOKit.IOService) T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>MonoMac.IOKit.IOService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The class. Class matching is successful on IOService's of this class or any subclass.</typeparam>
        <summary>
               Create a matching dictionary that specifies an IOService class match.
               </summary>
        <returns>The matching dictionary created, is returned on success, or <c>null</c> on failure.
               The dictionary is commonly passed to IOService.GetMatchingServices or IOService.AddNotification.
               </returns>
        <remarks>A very common matching criteria for IOService is based on its class.
           IOService.CreateMatchingDictionaryForClass will create a matching dictionary
           that specifies any IOService of a class, or its subclasses.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMatchingDictionaryForName">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The IOService name.</param>
        <summary>
               Create a matching dictionary that specifies an IOService name match.
               </summary>
        <returns>The matching dictionary created, is returned on success, or <c>null</c> on failure.
               The dictionary is commonly passed to IOServiceGetMatchingServices or IOServiceAddNotification.
               </returns>
        <remarks>A common matching criteria for IOService is based on its name.
               IOService.CreateMatchingDictionaryForName will create a matching dictionary that specifies an IOService with a given name.
               Some IOServices created from the device tree will perform name matching on the standard compatible,
               name, model properties.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMatchingDictionaryForName">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForName (ulong entryId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSMutableDictionary CreateMatchingDictionaryForName(unsigned int64 entryId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryId" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="entryId">The registry entry ID to be found.</param>
        <summary>
               Create a matching dictionary that specifies an IOService match based on a registry entry ID.
               </summary>
        <returns>The matching dictionary created, is returned on success, or <c>null</c> on failure.
               The dictionary is commonly passed to IOServiceGetMatchingServices or IOServiceAddNotification.
               </returns>
        <remarks>This function creates a matching dictionary that will match a registered,
               active IOService found with the given registry entry ID. The entry ID for a registry entry is
               returned by IORegistryEntry.ID.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatchingService">
      <MemberSignature Language="C#" Value="public static MonoMac.IOKit.IOService GetMatchingService (MonoMac.Foundation.NSDictionary matchingDictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOKit.IOService GetMatchingService(class MonoMac.Foundation.NSDictionary matchingDictionary) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IOService</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchingDictionary" Type="MonoMac.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="matchingDictionary">A CF dictionary containing matching information.
               IOKitLib can construct matching dictionaries for common criteria with helper methods
               such as  <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForClass&lt;T&gt;" />, <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForName(System.String)" />
               and <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForBSDName" />.</param>
        <summary>
               Look up a registered IOService object that matches a matching dictionary using the default master port.
               </summary>
        <returns>The first service matched is returned on success or null if no services matched.</returns>
        <remarks>This is the preferred method of finding IOService objects currently registered by IOKit
               (that is, objects that have had their RegisterService() methods invoked). To find IOService objects
               that aren't yet registered, use an iterator as created by IORegistryEntry.CreateIterator().
               IOService.AddMatchingNotification can also supply this information and install a notification of new IOServices.
               The matching information used in the matching dictionary may vary depending on the class of service being looked up.
               </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatchingServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoMac.IOKit.IOIterator&lt;T&gt; GetMatchingServices&lt;T&gt; (MonoMac.Foundation.NSDictionary matchingDictionary) where T : MonoMac.IOKit.IOService;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOKit.IOIterator`1&lt;!!T&gt; GetMatchingServices&lt;(class MonoMac.IOKit.IOService) T&gt;(class MonoMac.Foundation.NSDictionary matchingDictionary) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IOIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>MonoMac.IOKit.IOService</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="matchingDictionary" Type="MonoMac.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="matchingDictionary">A CF dictionary containing matching information.
               IOKit can construct matching dictionaries for common criteria with helper methods
               such as <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForClass" />, <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForName" />
               and <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForBSDName" />.</param>
        <summary>
               Look up registered IOService objects that match a matching dictionary using the default master port.
               </summary>
        <returns>A list of matching IOService objects</returns>
        <remarks>This is the preferred method of finding IOService objects currently registered by IOKit
               (that is, objects that have had their RegisterService() methods invoked). To find IOService objects that aren't yet registered,
               use an iterator as created by IORegistryEntry.CreateIterator(). IOService.AddMatchingNotification can also supply this information
               and install a notification of new IOServices. The matching information used in the matching dictionary may vary depending
               on the class of service being looked up.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAnyBusy">
      <MemberSignature Language="C#" Value="public static bool IsAnyBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsAnyBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               Returns <c>true</c> any IOServices are busy; otherwise <c>false</c>.
               </summary>
        <value>To be added.</value>
        <remarks>Many activities in IOService are asynchronous. When registration, matching,
               or termination is in progress on an IOService, its busyState is increased by one.
               Change in busyState to or from zero also changes the IOService's provider's busyState
               by one, which means that an IOService is marked busy when any of the above activities
               is ocurring on it or any of its clients. BusyState returns the busy state
               of the root of the service plane which reflects the busy state of all IOServices.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               Gets a value indicating whether this instance is busy.
               </summary>
        <value>
          <c>true</c> if this instance is busy with an asynchronous task; otherwise, <c>false</c>.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="MatchPropertyTable">
      <MemberSignature Language="C#" Value="public bool MatchPropertyTable (MonoMac.Foundation.NSDictionary matchingDictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MatchPropertyTable(class MonoMac.Foundation.NSDictionary matchingDictionary) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchingDictionary" Type="MonoMac.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="matchingDictionary">A CF dictionary containing matching information.
               IOKit can construct matching dictionaries for common criteria with helper methods
               such as <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForClass" />, <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForName" />
               and <see cref="M:MonoMac.IOKit.IOService.CreateMatchingDictionaryForBSDName" />.</param>
        <summary>
               Match an IOService objects with matching dictionary.
               </summary>
        <returns>
          <c>true</c> if this service object matches the matching dictionary, otherwise <c>false</c></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public MonoMac.IOKit.IOConnection Open (MonoMac.Kernel.Mach.Task owningTask, uint type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.IOKit.IOConnection Open(class MonoMac.Kernel.Mach.Task owningTask, unsigned int32 type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOKit.IOConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owningTask" Type="MonoMac.Kernel.Mach.Task" />
        <Parameter Name="type" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="owningTask">The mach task requesting the connection.</param>
        <param name="type">A constant specifying the type of connection to be created, interpreted only by the IOService's family.</param>
        <summary>
               A request to create a connection to an IOService.
               </summary>
        <returns>The IOConnection. </returns>
        <remarks>A non-kernel client may request a connection be opened via the IOService.Open() method,
               which will call IOService::newUserClient in the kernel. The rules and capabilities of user level clients
               are family dependent, the default IOService implementation returns <see cref="F:MonoMac.IOKit.IOReturn.Unsupported" /> (throws IOReturnException).</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="RequestProbe">
      <MemberSignature Language="C#" Value="public void RequestProbe (uint options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestProbe(unsigned int32 options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="options">An options mask, interpreted only by the IOService's family.</param>
        <summary>
               A request to rescan a bus for device changes.
               </summary>
        <remarks>A non-kernel client may request a bus or controller rescan for added or removed devices,
               if the bus family does automatically notice such changes. For example, SCSI bus controllers do not notice device changes.
               The implementation of this routine is family dependent, and the default IOService implementation returns
               <see cref="F:MonoMac.IOKit.IOReturn.Unsupported" /> (throws IOReturnException).</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(float64 seconds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">Number of seconds to wait.</param>
        <summary>
              Wait until this instance is no longer busy.
          </summary>
        <returns>True if the method timed out.</returns>
        <remarks>Blocks the caller until an IOService is non busy, see <see cref="P:MonoMac.IOKit.IOService.BusyState" />.</remarks>
        <exception cref="T:System.ObjectDisposedException">If this instance has already been disposed.</exception>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(float64 seconds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">Number of seconds to wait.</param>
        <summary>
              Wait until all IOServices are not busy.
          </summary>
        <returns>
          <c>true</c> if the method timed out; otherwise <c>false</c></returns>
        <remarks>Blocks the caller until all IOServices are not busy, see <see cref="P:MonoMac.IOKit.IOService.BusyState" />.</remarks>
        <exception cref="T:MonoMac.IOKit.IOReturnException">If the method call failed.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
