<Type Name="IOBluetoothObjectPushUIController" FullName="MonoMac.IOBluetoothUI.IOBluetoothObjectPushUIController">
  <TypeSignature Language="C#" Value="public class IOBluetoothObjectPushUIController : MonoMac.AppKit.NSWindowController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IOBluetoothObjectPushUIController extends MonoMac.AppKit.NSWindowController" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.AppKit.NSWindowController</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("IOBluetoothObjectPushUIController", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An NSWindowController subclass that supports the creation of an IOBluetoothObjectPushUIController object.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothObjectPushUIController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothObjectPushUIController (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothObjectPushUIController (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothObjectPushUIController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothObjectPushUIController (MonoMac.IOBluetooth.IOBluetoothDevice inDevice, string[] inFiles, MonoMac.Foundation.NSObject inDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.IOBluetooth.IOBluetoothDevice inDevice, string[] inFiles, class MonoMac.Foundation.NSObject inDelegate) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initObjectPushWithBluetoothDevice:withFiles:delegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="inDevice" Type="MonoMac.IOBluetooth.IOBluetoothDevice" />
        <Parameter Name="inFiles" Type="System.String[]" />
        <Parameter Name="inDelegate" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="inDevice">The remote device to send the files to.</param>
        <param name="inFiles">An array of file paths to send.</param>
        <param name="inDelegate">A delegate object that implements the single method above.  If no delegate
            is specified this object will release itself when the transaction is complete.</param>
        <summary>Creates an instance of an IOBluetoothObjectPush object</summary>
        <remarks>The event delegate should implement a single delegate method:
            <code>
                [Export ("objectPushComplete:")]
                void objectPushComplete (IOBluetoothObjectPushUIController inPusher)
                {
                    // handle complete
                }
            </code>
            The method will be called when the transaction is complete and
            should be used to release the push object by the delegate. If no delegate is set
            the object will release itself when the transfer is finished.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSheetModalForWindow">
      <MemberSignature Language="C#" Value="public void BeginSheetModalForWindow (MonoMac.AppKit.NSWindow sheetWindow, MonoMac.Foundation.NSObject modalDelegate, MonoMac.ObjCRuntime.Selector didEndSelector, IntPtr contextInfo = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginSheetModalForWindow(class MonoMac.AppKit.NSWindow sheetWindow, class MonoMac.Foundation.NSObject modalDelegate, class MonoMac.ObjCRuntime.Selector didEndSelector, native int contextInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sheetWindow" Type="MonoMac.AppKit.NSWindow" />
        <Parameter Name="modalDelegate" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="didEndSelector" Type="MonoMac.ObjCRuntime.Selector" />
        <Parameter Name="contextInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="sheetWindow">NSWindow to attach the device selector panel to as a sheet.</param>
        <param name="modalDelegate">Delegate object that gets sent the <c>didEndSelector</c> when the sheet modal session is finished.</param>
        <param name="didEndSelector">Selector sent to the modalDelegate when the sheet modal session is finished.</param>
        <param name="contextInfo">User-definied value passed to the modalDelegate in the <c>didEndSelector.</c></param>
        <summary>Runs the  transfer UI as a sheet on the target window.</summary>
        <remarks>This function works the same way as <see cref="MonoMac.AppKit.NSApplication.BeginSheet" />.
              The <c>didEndSelector</c> has a similar prototype as in NSApplication except that the first argument is the
              IOBluetoothDeviceSelectorController object instead of the window:
              <code>
                  [Export ("sheetDidEnd")]
                  void SheetDidEnd (IOBluetoothDeviceSelectorController controller, IOBluetoothUIPanelReturn returnCode, IntPtr contextInfo)
                  {
                  // handle result.
                  }
              </code></remarks>
        <exception cref="MonoMac.IOKit.IOReturnException">Thrown if the sheet modal session did not start.</exception>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public virtual MonoMac.IOBluetooth.IOBluetoothDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.IOBluetooth.IOBluetoothDevice Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("getDevice")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the object representing the remote target device in the transfer.</summary>
        <value>The remote device of the transfer.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the IOBluetoothObjectPushUIController object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the IOBluetoothObjectPushUIController class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposting <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the IOBluetoothObjectPushUIController ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTransferInProgress">
      <MemberSignature Language="C#" Value="public virtual bool IsTransferInProgress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTransferInProgress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("isTransferInProgress")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets state of the transfer.</summary>
        <value>The state of the transfer.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunModal">
      <MemberSignature Language="C#" Value="public virtual void RunModal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RunModal() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("runModal")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Runs the transfer UI panel in a modal session.</summary>
        <remarks>Returns when the modal session has ended. This object will call back over the
            delegate method specified by the constructor when the transfer is complete.  Users should release
            the object then. If no delegate is set the object will release itself.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunPanel">
      <MemberSignature Language="C#" Value="public virtual void RunPanel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RunPanel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("runPanel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Runs the transfer UI as a panel with no modal session.</summary>
        <remarks>Returns immediately.  The object will callback over the delegate method specified in the constructor
            when the transfer is completed.  If no delegate is set the object will release itself.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIconImage">
      <MemberSignature Language="C#" Value="public virtual void SetIconImage (MonoMac.AppKit.NSImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetIconImage(class MonoMac.AppKit.NSImage image) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setIconImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoMac.AppKit.NSImage" />
      </Parameters>
      <Docs>
        <param name="image">Image to use as the icon.</param>
        <summary>Manually sets the icon used in the panel.</summary>
        <remarks>The panel icon should be set to the icon of the calling application.  If not set, the panel
            will try to load up the correct icon for the target device, and will default to the icon of
            the running application on fail.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("stop")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the transfer UI.</summary>
        <remarks>Returns immediately. The object will callback over the delegate method specified in the constructor
            when the transfer is completed, or will release itself if no delegate is set.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public virtual string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("getTitle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setTitle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets and sets the title of the panel when not run as a sheet.</summary>
        <value>Title of the device selector panel.</value>
        <remarks>The panel title should be localized for best user experience.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
