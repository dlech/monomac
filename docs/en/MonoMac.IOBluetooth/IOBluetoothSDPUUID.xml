<Type Name="IOBluetoothSDPUUID" FullName="MonoMac.IOBluetooth.IOBluetoothSDPUUID">
  <TypeSignature Language="C#" Value="public class IOBluetoothSDPUUID : MonoMac.Foundation.NSData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IOBluetoothSDPUUID extends MonoMac.Foundation.NSData" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSData</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("IOBluetoothSDPUUID", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An NSData subclass that represents a UUID as defined in the Bluetooth SDP spec.</summary>
    <remarks>
      <para>An NSData subclass that represents a UUID as defined in the Bluetooth SDP spec.</para>
      <para>The IOBluetoothSDPUUID class can represent a UUID of any valid size (16, 32 or 128 bits). It provides the ability to compare two UUIDs no matter what their size as well as the ability to promote the size of a UUID to a larger one.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPUUID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPUUID (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPUUID (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPUUID (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPUUID (ushort uuid16);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int16 uuid16) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithUUID16:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="uuid16" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="uuid16">
          <format type="text/html">
            <dd>
              <para>A scalar representing a 16-bit UUID</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Initializes a new 16-bit IOBluetoothSDPUUID with the given UUID16</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPUUID (uint uuid32);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 uuid32) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithUUID32:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="uuid32" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="uuid32">
          <format type="text/html">
            <dd>
              <para>A scalar representing a 32-bit UUID</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Creates a new 32-bit IOBluetoothSDPUUID with the given UUID32</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassForArchiver">
      <MemberSignature Language="C#" Value="public virtual MonoMac.ObjCRuntime.Class ClassForArchiver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.ObjCRuntime.Class ClassForArchiver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("classForArchiver")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Overridden by subclasses to substitute a class other than its own during archiving.</para>
        </summary>
        <value>
        </value>
        <remarks>
          <para>This method is invoked by <c>NSArchiver</c>. It allows specialized behavior for archiving—for example, the private subclasses of a class cluster substitute the name of their public superclass when being archived. </para>
          <para>
            <c>NSObject</c>’s implementation returns the object returned by <c><format type="text/html"><a href="#//apple_ref/occ/instm/NSObject/classForCoder">classForCoder</a></format></c>. Override <c><format type="text/html"><a href="#//apple_ref/occ/instm/NSObject/classForCoder">classForCoder</a></format></c> to add general coding behavior.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassForCoder">
      <MemberSignature Language="C#" Value="public virtual MonoMac.ObjCRuntime.Class ClassForCoder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.ObjCRuntime.Class ClassForCoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("classForCoder")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Overridden by subclasses to substitute a class other than its own during coding.</para>
        </summary>
        <value>
        </value>
        <remarks>
          <para>This method is invoked by <c>NSCoder</c>. <c>NSObject</c>’s implementation returns the receiver’s class. The private subclasses of a class cluster substitute the name of their public superclass when being archived.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassForPortCoder">
      <MemberSignature Language="C#" Value="public virtual MonoMac.ObjCRuntime.Class ClassForPortCoder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.ObjCRuntime.Class ClassForPortCoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("classForPortCoder")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Overridden by subclasses to substitute a class other than its own for distribution encoding.</para>
        </summary>
        <value>
        </value>
        <remarks>
          <para>This method allows specialized behavior for distributed objects—override <c><format type="text/html"><a href="#//apple_ref/occ/instm/NSObject/classForCoder">classForCoder</a></format></c> to add general coding behavior. This method is invoked by <c>NSPortCoder</c>. <c>NSObject</c>’s implementation returns the class returned by <c><format type="text/html"><a href="#//apple_ref/occ/instm/NSObject/classForCoder">classForCoder</a></format></c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUuidWithBytes">
      <MemberSignature Language="C#" Value="public static MonoMac.IOBluetooth.IOBluetoothSDPUUID CreateUuidWithBytes (IntPtr bytes, uint length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOBluetooth.IOBluetoothSDPUUID CreateUuidWithBytes(native int bytes, unsigned int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("uuidWithBytes:length:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothSDPUUID</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <format type="text/html">
            <dd>
              <para>An array of bytes representing the UUID.</para>
            </dd>
          </format>
        </param>
        <param name="length">
          <format type="text/html">
            <dd>
              <para>The length of the array of bytes.</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Creates a new IOBluetoothSDPUUID object with the given bytes of the given length.</para>
        </summary>
        <returns>
          <para>Returns the new IOBluetoothSDPUUID object or nil on failure.</para>
        </returns>
        <remarks>
          <para>If the length is invalid for a UUID, nil is returned.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUuidWithData">
      <MemberSignature Language="C#" Value="public static MonoMac.IOBluetooth.IOBluetoothSDPUUID CreateUuidWithData (MonoMac.Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOBluetooth.IOBluetoothSDPUUID CreateUuidWithData(class MonoMac.Foundation.NSData data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("uuidWithData:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothSDPUUID</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoMac.Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">
          <format type="text/html">
            <dd>
              <para>The NSData containing the UUID bytes.</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Creates a new IOBluetoothSDPUUID object from the given NSData.</para>
        </summary>
        <returns>
          <para>Returns the new IOBluetoothSDPUUID object or nil on failure.</para>
        </returns>
        <remarks>
          <para>If the length of the NSData is invalid for a UUID, nil is returned.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUuid16">
      <MemberSignature Language="C#" Value="public static MonoMac.IOBluetooth.IOBluetoothSDPUUID FromUuid16 (ushort uuid16);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOBluetooth.IOBluetoothSDPUUID FromUuid16(unsigned int16 uuid16) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("uuid16:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothSDPUUID</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid16" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="uuid16">
          <format type="text/html">
            <dd>
              <para>A scalar representing a 16-bit UUID</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Creates a new 16-bit IOBluetoothSDPUUID with the given UUID16</para>
        </summary>
        <returns>
          <para>Returns the new IOBluetoothSDPUUID object.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUuid32">
      <MemberSignature Language="C#" Value="public static MonoMac.IOBluetooth.IOBluetoothSDPUUID FromUuid32 (uint uuid32);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOBluetooth.IOBluetoothSDPUUID FromUuid32(unsigned int32 uuid32) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("uuid32:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothSDPUUID</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid32" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="uuid32">
          <format type="text/html">
            <dd>
              <para>A scalar representing a 32-bit UUID</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Creates a new 32-bit IOBluetoothSDPUUID with the given UUID32</para>
        </summary>
        <returns>
          <para>Returns the new IOBluetoothSDPUUID object.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUUIDWithLength">
      <MemberSignature Language="C#" Value="public virtual MonoMac.IOBluetooth.IOBluetoothSDPUUID GetUUIDWithLength (uint newLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoMac.IOBluetooth.IOBluetoothSDPUUID GetUUIDWithLength(unsigned int32 newLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("getUUIDWithLength:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothSDPUUID</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newLength" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="newLength">
          <format type="text/html">
            <dd>
              <para>The desired length for the UUID.</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Returns an IOBluetoothSDPUUID object matching the target UUID, but with the given number of bytes.</para>
        </summary>
        <returns>
          <para>Returns an IOBluetoothSDPUUID object with the same data as the target but with the given length if it is possible to do so. Otherwise, nil is returned.</para>
        </returns>
        <remarks>
          <para>If the target object is the same length as newLength, it returns self. If newLength is greater it creates a new IOBluetoothSDPUUID object with the correct value for the given length. If newLength is smaller, it will attempt to create a new IOBluetoothSDPUUID that is smaller if the data matches the Bluetooth UUID base. This downconversion is currently unimplemented.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEqualToUUID">
      <MemberSignature Language="C#" Value="public virtual bool IsEqualToUUID (MonoMac.IOBluetooth.IOBluetoothSDPUUID otherUUID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEqualToUUID(class MonoMac.IOBluetooth.IOBluetoothSDPUUID otherUUID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("isEqualToUUID:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherUUID" Type="MonoMac.IOBluetooth.IOBluetoothSDPUUID" />
      </Parameters>
      <Docs>
        <param name="otherUUID">
          <format type="text/html">
            <dd>
              <para>The UUID object to be compared with the target.</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Compares the target IOBluetoothSDPUUID object with the given otherUUID object.</para>
        </summary>
        <returns>
          <para>Returns true if the UUID values of each object are equal. This includes the case where the sizes are different but the data itself is the same when the Bluetooth UUID base is applied.</para>
        </returns>
        <remarks>
          <para>This method will compare the two UUID values independent of their length.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
