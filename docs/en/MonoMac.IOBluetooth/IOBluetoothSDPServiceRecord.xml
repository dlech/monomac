<Type Name="IOBluetoothSDPServiceRecord" FullName="MonoMac.IOBluetooth.IOBluetoothSDPServiceRecord">
  <TypeSignature Language="C#" Value="public class IOBluetoothSDPServiceRecord : MonoMac.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IOBluetoothSDPServiceRecord extends MonoMac.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("IOBluetoothSDPServiceRecord", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An instance of this class represents a single SDP service record.</summary>
    <remarks>
      <para>An instance of this class represents a single SDP service record.</para>
      <para>As a service record, an instance of this class has an NSDictionary of service attributes. It also has a link to the IOBluetoothDevice that the service belongs to. The service dictionary is keyed off of the attribute ID of each attribute represented as an NSNumber.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPServiceRecord ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPServiceRecord (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPServiceRecord (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPServiceRecord (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IOBluetoothSDPServiceRecord (MonoMac.Foundation.NSDictionary serviceDict, MonoMac.IOBluetooth.IOBluetoothDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSDictionary serviceDict, class MonoMac.IOBluetooth.IOBluetoothDevice device) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithServiceDictionary:device:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceDict" Type="MonoMac.Foundation.NSDictionary" />
        <Parameter Name="device" Type="MonoMac.IOBluetooth.IOBluetoothDevice" />
      </Parameters>
      <Docs>
        <param name="serviceDict">To be added.</param>
        <param name="device">To be added.</param>
        <summary>
          <para>Returns an initialized IOBluetoothSDPServiceRecord * with the attributes specified in the provided service dictionary. Provide a pointer to an IOBlueotothDevice if you wish to associate the record to a specific IOBluetoothDevice.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSDictionary Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSDictionary Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("attributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Returns an NSDictionary containing the attributes for the service.</para>
        </summary>
        <value>
        </value>
        <remarks>
          <para>The attribute dictionary is keyed off of the attribute id represented as an NSNumber. The values in the NSDictionary are IOBluetoothSDPDataElement objects representing the data element for the given attribute.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public virtual MonoMac.IOBluetooth.IOBluetoothDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.IOBluetooth.IOBluetoothDevice Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("device")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Returns the IOBluetoothDevice that the target service belongs to.</para>
        </summary>
        <value>
        </value>
        <remarks>
          <para>If the service is a local service (i.e. one the current host is vending out), then nil is returned.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the IOBluetoothSDPServiceRecord object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the IOBluetoothSDPServiceRecord class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposting <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the IOBluetoothSDPServiceRecord ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeDataElement">
      <MemberSignature Language="C#" Value="public virtual MonoMac.IOBluetooth.IOBluetoothSDPDataElement GetAttributeDataElement (ushort attributeID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoMac.IOBluetooth.IOBluetoothSDPDataElement GetAttributeDataElement(unsigned int16 attributeID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("getAttributeDataElement:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothSDPDataElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeID" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="attributeID">
          <format type="text/html">
            <dd>
              <para>The attribute ID of the desired attribute.</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Gets the data element for the given attribute ID in the target service.</para>
        </summary>
        <returns>
          <para>The data element for the given attribute ID in the target service. If the service does not contain an attribute with the given ID, then <see langword="null" /> is returned.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRecordWithServiceDictionary">
      <MemberSignature Language="C#" Value="public static MonoMac.IOBluetooth.IOBluetoothSDPServiceRecord GetRecordWithServiceDictionary (MonoMac.Foundation.NSDictionary serviceDict, MonoMac.IOBluetooth.IOBluetoothDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.IOBluetooth.IOBluetoothSDPServiceRecord GetRecordWithServiceDictionary(class MonoMac.Foundation.NSDictionary serviceDict, class MonoMac.IOBluetooth.IOBluetoothDevice device) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("withServiceDictionary:device:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothSDPServiceRecord</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDict" Type="MonoMac.Foundation.NSDictionary" />
        <Parameter Name="device" Type="MonoMac.IOBluetooth.IOBluetoothDevice" />
      </Parameters>
      <Docs>
        <param name="serviceDict">To be added.</param>
        <param name="device">To be added.</param>
        <summary>
          <para>Gets an IOBluetoothSDPServiceRecord with the attributes specified in the provided service dictionary. Provide an IOBlueotothDevice if you wish to associate the record to a specific IOBluetoothDevice.</para>
        </summary>
        <returns>
          <para>IOBluetoothSDPServiceRecord with the attributes specified in the provided dictionary.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasService">
      <MemberSignature Language="C#" Value="public virtual bool HasService (MonoMac.IOBluetooth.IOBluetoothSDPUUID[] serviceUuids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasService(class MonoMac.IOBluetooth.IOBluetoothSDPUUID[] serviceUuids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("hasServiceFromArray:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceUuids" Type="MonoMac.IOBluetooth.IOBluetoothSDPUUID[]" />
      </Parameters>
      <Docs>
        <param name="serviceUuids">
          <format type="text/html">
            <dd>
              <para>An array of IOBluetoothSDPUUID objects to search for in the target service.</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Returns <see langword="true" /> if any one of the UUIDs in the given array is found in the target service.</para>
        </summary>
        <returns>
          <para>Returns <see langword="true" /> if any of the given UUIDs are present in the service.</para>
        </returns>
        <remarks>
          <para>The given array should contain IOBluetoothSDPUUID objects. It is currently implemented such that it returns <see langword="true" /> if any of the UUIDs are found. However in the future, it is likely that this will change to more closely match the functionality in the SDP spec so that it only returns <see langword="true" /> if all of the given UUIDs are present. That way, both AND and OR comparisons can be implemented. Please make a note of this potential change.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="L2CAPPSM">
      <MemberSignature Language="C#" Value="public MonoMac.IOBluetooth.BluetoothL2CAPPSM L2CAPPSM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.IOBluetooth.BluetoothL2CAPPSM L2CAPPSM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.BluetoothL2CAPPSM</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Allows the discovery of the L2CAP PSM assigned to the service.</para>
        </summary>
        <value>The found L2CAP PSM.</value>
        <remarks>
          <para>This method will search through the ProtoclDescriptorList attribute to find an entry with the L2CAP UUID (UUID16: 0x0100). If one is found, it gets the second element of the data element sequence.</para>
        </remarks>
        <excption cref="T:MonoMac.IOKit.IOReturnException">If the PSM is not found.</excption>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public virtual bool Matches (MonoMac.IOBluetooth.IOBluetoothSDPUUID[] uuidArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Matches(class MonoMac.IOBluetooth.IOBluetoothSDPUUID[] uuidArray) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("matchesUUIDArray:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuidArray" Type="MonoMac.IOBluetooth.IOBluetoothSDPUUID[]" />
      </Parameters>
      <Docs>
        <param name="uuidArray">
          <format type="text/html">
            <dd>
              <para>An array of IOBluetoothSDPUUID objects to search for in the target service.</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Returns <see langword="true" /> if ALL of the UUIDs in the given array is found in the target service.</para>
        </summary>
        <returns>
          <para>Returns <see langword="true" /> if all of the given UUIDs are present in the service.</para>
        </returns>
        <remarks>
          <para>It only returns <see langword="true" /> if all of the UUIDs are found. This method is like <see cref="M:MonoMac.IOBluetooth.IOBluetoothSDPServiceRecord.HasService (MonoMac.IOBluetooth.IOBluetoothSDPUUID[])" /> except that it requires that all UUIDs match instead of any of them matching.</para>
          <para>NOTE: This method is only available in OS X v10.2.4 (Bluetooth v1.1) or later.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public virtual bool Matches (ushort uuid16);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Matches(unsigned int16 uuid16) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("matchesUUID16:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid16" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="uuid16">
          <format type="text/html">
            <dd>
              <para>A BluetoothSDPUUID16 to search for in the target service.</para>
            </dd>
          </format>
        </param>
        <summary>
          <para>Returns <see langword="true" /> the UUID16 is found in the target service.</para>
        </summary>
        <returns>
          <para>Returns <see langword="true" /> if the UUID16 is present in the service.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RFCOMMChannelID">
      <MemberSignature Language="C#" Value="public byte RFCOMMChannelID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 RFCOMMChannelID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the RFCOMM channel ID assigned to the service.</para>
        </summary>
        <value>The location of the found RFCOMM channel ID.</value>
        <remarks>
          <para>This method will search through the ProtoclDescriptorList attribute to find an entry with the RFCOMM UUID (UUID16: 0x0003). If one is found, it gets the second element of the data element sequence.</para>
        </remarks>
        <excption cref="T:MonoMac.IOKit.IOReturnException">If the channel ID was not found.</excption>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public virtual string ServiceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("getServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Returns the name of the service.</para>
        </summary>
        <value>
        </value>
        <remarks>
          <para>This is currently implemented to simply return the attribute with an id of 0x0100. In the future, it will be extended to allow name localization based on the user's chosen language or other languages.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortedAttributes">
      <MemberSignature Language="C#" Value="public virtual MonoMac.IOBluetooth.IOBluetoothSDPServiceAttribute[] SortedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.IOBluetooth.IOBluetoothSDPServiceAttribute[] SortedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("sortedAttributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.IOBluetooth.IOBluetoothSDPServiceAttribute[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Returns a sorted array of SDP attributes</para>
        </summary>
        <value>
        </value>
        <remarks>
          <para>This method will walk all the elements of the service record and return an array of IOBluetoothSDPServiceAttribute objects sorted by attributeID</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
